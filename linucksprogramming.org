#+TITLE: Linux Programming

* Miscellaneous Bash Command Line
 * Hardlinks
  #+BEGIN_SRC bash
    ln file1 hlink1
  #+END_SRC   
  A hardlink deleted/modified will delete and/or modify the original file
  A soft or symbolic link is a psydonym for the real file and entering a soft link directory will practically send you to the new directory
 * apropos
 * One Line For Loop
   #+BEGIN_SRC bash
   for i in $(seq 1 10); do echo $i; done 
   #+END_SRC 
 * ~find~ finds files in a specified directory
 * ~*.txt~ is a form of wildcarding called /shell globbing/.
 * ~tee~ sends output to two seperate places. 
   #+BEGIN_SRC bash
   echo "lol" | tee lol.txt
   #+END_SRC
   This will output "lol" to both the file /lol.txt/ and to stdout
** Relative Paths
   * Absolute path: /, /home/sam, etc. These are 100% guranteed to be directories.
   * Relative Path: ~cd directory1~. This is moving to a directory, but that directory has to be in my current directory.
** Interactive Commands:
   Command prompts you before it runs
* SSH stuff
** ssh-keygen
   * ~ssh-keygen -C "hawk-keys"~ Generates keys with the comment of "hawk-keys"
   * Protect ~id_rsa file~. The one with ~.pub~ is the public one
   * ~ssh-copy-id username@domain~ pulls the public key from the domain and allows us to connect without a password
** Stack
   * Items in an order and used in an order. Directory structure is a stack, for example.
* Disk Stuff
   * Disks or potentially dangerous operations need to be run in root
   * ~fdisk -l~ lists out the drives on the system
   * ~lsblk~ lists out block devices
   * ~fdisk /dev/sdb/~ will format the drive ~/dev/sdb~
   * In order to mount the file system on boot, you need to add the file system to the fstab file as follows:
     + ~/dev/sdb1    /data    ext4    defaults    0 0~
     + obv, sdb1 is replaced with your actual drive and this is modified to suit your needs.
     + This could break your system lol
   * Put home directories in other drives so the boot drive doesn't fill up with users
   * ~mount -a~ will mount drivers in fstab without rebooting the system
* I/O
  * Standard output is a file (stdout) (like everything else in linux)
** Redirectiong Standard Output
  * We can use the ~>~ redirection operator followed by the name of a file to redirect standard output into the said file
    * If we redirect an empty standard output into a file, it will overwrite the file with nothing
    * The destination file is always rewritten from the beginning of the file
  * Error messages are not sent to standard output, but rather to standard error (stderr)
  * Appending to a file from standard output can be done with the ~>>~ redirection operator
** Redirection Standard Error
  * In order to redirect the standard error, we need to refer to the file descriptor, of which there are three
    0) standard input
    1) standard output
    2) standard error
  * So if we want to redirect the standard error, we need to do something along the lines of the following:
    #+BEGIN_SRC bash
    ls -l /bin/usr 2> ls-error.txt
    #+END_SRC
    This will redirect the error that this generates into the file ~ls-error.txt~
** Redirecting all output
   #+BEGIN_SRC bash
   ls -l /bin/usr > ls-output.txt 2>&1
   #+END_SRC
   This will redirect the error into the standard output (~2>&1~) and then the output into the file
   * Newer versions of bash allow you to just use ~&>~ and ~&>>~ to redirect both into a file
** Getting rid of unwanted output
   We can just redirect output into /dev/null lol 
** Standard Input
   * ~cat~ can be used to display file content to standard output. That means we can redirect it's output into other files that we give it.
     * ~cat~, by default, reads from standard input.
     * if we run ~cat > file.txt~, it will practically prompt us for input. With this, we can type whatever and then press ~C-d~ to tell ~cat~ to stop and finish. This will write whatever we type into ~file.txt~
   * Using ~<~, we can redirect standard input into a command. If we run ~cat < file.txt~, it will send ~file.txt~ into ~cat~. While ~cat~ works like this without ~<~, it is only used as an example right now. I'm sure it's useful for something...
** Pipelines
   #+BEGIN_SRC bash
   command1 | command2 
   #+END_SRC
   This sends the output of command 1 into the input of command2.
   * This is different from the redirection operator as the redirection operator deals with file and a command, while pipelines deal with direct input from the output of a command
     * A redirection operator done like this: ~ls > less~ could overwrite the executable of ~less~ with the output of ~ls~. This is funny lol
   * Pipelines can be used in conjunction with /filters/ in order to get a desired output
   #+BEGIN_SRC bash
   ls /bin /usr/bin | sort | less 
   #+END_SRC
   * ~uniq~ is often used in conjunction with ~sort~ as ~uniq~ takes a sorted list and removes duplicates from the list
   * ~wc~ can print lines, words, and byte counts and can, like any other command, have input piped into it.
   * ~grep~ outputs lines that match a certain pattern. Can be useful for searching directories with lots of files for a certain command by piping the output of ~ls~ into ~grep~
   * ~head~/~tail~ can be used to print the first/last few lines of a file. With ~n 5~, we'll see the first/last 5 lines of an inputted file
     * ~tail~ has an option to see files in real time (~-f~). This can be used to watch, say, logs coming from ~/var/log/messages~.
   * ~tee~ can be used as mediator in a pipeline. It can take input and output it into a file, in which can be ~grep~ ed for filtered info
   * 
** Interactive
   Can mean two things:
   1. Prompt user before doing something
   2. Performs a volatile action that is only there for that session
* Permissions/Modes
   * If we try and run ~file~ on a file that we do not have permission to interact with, we will get an error instead of getting our desired outcome
   * For example, regular users do not have rights to view or modify ~/etc/shadow~
   * Users can have acc
   * Proper term is mode. chmod == change mode
   * ~umask~ is a bitwise function that show the permissions on a file.
   * Default mode is very open, files in your home directory can be accessed by other users on the system
   * This is from the idea of linux philosophy of being very open source
   * ~adduser~ will add a user to a system. * ~useradd~ will create a user without a home directory. It's strange
   * ~id $USER~ can be used to find the id numbers associated with that user
   * ~su~ can be used to switch a user. we'll need perms for this
   * It's not the name that gives an accout perms, but the UID and the GID
   * An account with UID and GID of 0 (root) will have root access
   * By default, any user can read and execute in your home directory.
   * We'll want to change this with the ~chmod~ command.
   #+BEGIN_SRC
   bash chmod -v o-rwx /home/user
   #+END_SRC
   In this example, we are running change mod with verbose and removing(-) read write and execute from the other user group.
   * ~groupadd~ will create a new group on the system.
   * ~usermod -aG~ will add a user to a group (group, user)
   * ~chown~ will change the ownership of a file
** Umask
    * Files are created by default with permissions 777 (octal for rwx on your uid and all groups) for directories and 666 for files. 
    * umask is what has been subtracted from a permission. If you run the command ~umask~ in a dir with perms of 775, it will return a value of ~0002~. 
    * umask calculations are done per octal digit. 666-27 is 640. 
    * ~umask~ run in a session is only good for a certain session. We'll want to make this permanent by adjusting the ~~/.profile~ file. 
    * ~stat~ can be run on any file to see the permissions on it. 
    * umask is the octal subtraction of the default permissions by whatever the user's umask is set to. 
    * There are no negatives in umask, it just goes to 0
* AWS/Cloud9
  * AWSEducate just handles logons. Vocarium will deal with Cloud9
  * Cloud9: An IDE that is completely virtualized in a cloud. Has a terminal, has an IDE, other things
    * Virtualized development environment running on top of linux
* Redirection/Pipes
  * If you redirect standard output into ~/dev/null~, you will see the errors
    #+BEGIN_SRC bash
    find /etc/ -maxdepth 2 -print > /dev/null #This will print errors to the screen
    #+END_SRC
  * You can redirect standard error with a ~2>~ redirection operator. You might want this in a log file for further processing
  * Say you want to pipe a ~find~ command into less but also see the error, you would want to run something like this:
    #+BEGIN_SRC bash
    find /etc -maxdepth 2 -print 2>&1 | less
    #+END_SRC
    This will output stderr to where stdout is going, in this case, to ~less~. 
  * Redirections will, by default, only redirect stdout. stderr has to be specified.
  * Order matters when it comes to making a pipeline
  * Will also, by default overwrite where ever it's being redirected to. 
    * ~>>~ will not, it will just append
  * stdin can be redirected too.
** Cool Filters
  * ~wc -l < auth.log~ will count the lines in wordcount and output to standard out
  * \/proc\/ is a psuedo filesystem. It is not a command, but ~man~ can be run on it
  * ~cut~ command can be used to cut input by a delimiter. Can be used in a pipeline.
    * ~cut -d " " -f 10~ will cut the 10th "word" and output it.
  * ~tr~ can be used to translate characters, or delete them. can also be used as a filter, for example, to cut out whitespace
  * ~tail -n 10~ will show the last 10 lines
  * ~sort~ will sort things alpha-numerically
  * ~uniq -c~ will get rid of duplicates, but also count the frequency of them
  
    

* Shell Scripting
  * When we write a script, we'll want to change the permissions so we can execute it. We'll use either ~chmod 755 script~ or ~chmod 700 script~ depending on who we want to see it.
  * The shell knows the name of scripts and programs because they are added to our PATH.
    * We can add directories to our PATH with ~export PATH=$PATH:directory~, though, we would probably ant to add this to our ~.bash_profile~ so it runs every time we login.
  * Linux distros encourage using a personal bin folder in our home directories. Scripts in here will be auto added to our PATH on the next login.
  * When the system is logged into, the system reads startup files. These are generally found in your dotfiles or in ~/etc/~
    * For example, ~/etc/profile~ is a global config script that applies to all users
    * ~.bash_profile~ is a file used to extend or overwrite configs that apply globablly
  * Non-login shell session use the following (bash specific)
    * ~/etc/bash.bashrc~ : global
    * ~.bashrc~ : local
  * ~alias~ is a good way to shorten a long command
    #+BEGIN_SRC bash
    alias name=value
    #+END_SRC
  * Shell functions are "scripts within scripts" that act similarly to functions in other languages
  * Quotes can be used effectivly in a way that allows for a few lines to be echoed out instead of using ~echo~ on multiple lines
    * This can be inefficient at times. We can get arround the quotes by using a "here" script see the following:
      #+BEING_SRC bash
        #!/bin/bash
        cat << _EOF_
        <html>
        <body>
          this is a body
        </body>
        </html>
        _EOF_
      #+END_SRC
      By wrapping our text like this, we can feed cat a stream of text. 
    * _EOF_ in this case is a /token/. EOF is traditional, but you can use anything as long as it doesn't interfer it bash commands or their reverse.
    * We can change ~<<~ to ~<<-~ in order to ignore leading tabs (but not spaces) in our here script
  * Variables can be declared and called as per the following:
    #+BEING_SRC bash
      title="Cool Title!"
      echo $title
    #+END_SRC
    Keep in mind that spaces are illegal in our declaration
    * Environment variables can be called the same way
      * Env variables are generally written in all caps
  * We can create a substitution, as it is called, as per the following:
    #+BEGIN_SRC bash
      $(date +"%x %r %Z) #This basically creates a temp variable that is the aglutination of the date command
    #+END_SRC
    * This an be assigned to a variable like anything else
  * Constants can be declared with caps lock enabled
  * Functions can be declared per the following:
    #+BEGIN_SRC bash
      cool_function(){
        echo "awesome!"
      } 
      cool_funtion()
    #+END_SRC
