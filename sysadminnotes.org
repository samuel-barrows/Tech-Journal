#+TITLE: Sysadmin

* What does a sysadmin do?
  - Install, operate, and maintain client and server OSes
    - Network config
    - Configure DNS, DHCP, Active Directory, Update
    - Troubleshoot
    - Automate, document, configure
    - Take notes and repeate something that works
  - Secure a system and prevent 0 days
  - O&M. When something comes out, you have to go and fix it ASAP
* Virtual Network Architecture:
  [[networkmap.png]]
  - StudentX -> fw01-studentX -> SYS255-WAN -> fw-sys255 -> CYBER -> "internet"
  - WAN: Wide Area Network
    - You need a unique WAN IP address. Shared WAN IP addresses will not work together
  - LAN: Local Area Network
  - Lab Scope: Turn on firewall, connect things, set up static IPs, make sure things connect

* Lab 1 Notes
** Configuring PfSense
   PfSense: A firewall distribution of FreeBSD that is made for the purpose of being installed on a router or firewall. It's default password is admin/pfsense
  1. [X] The first step is to configure the virtual machine itself. We have to network it to the other machines in our virtual network.
     * Right click on the machine in vsphere and modify the network adapters to work on the specified WAN. In our case, Network adapter 1 is going to connect out to the WAN and the second connects to our LAN. 
  2. [X] Restart the machine
  3. [X] Assign Interfaces
     * The WAN, by default, is using DHCP to give itself an IP address. We don't want this as we have a specified IP assigned to us. We'll want to change this.
     * Make sure to set the uplink IP in the WAN setup.
     * We need to assign WAN to em0 and LAN to em1. This is done through the 1 option and going through the wizard. Don't assign VLANs.
  4. [X] Set IPs to the Interfaces
     * Select 2 to enter the wizard. We want to remove DHCP from WAN and LAN as want to use static addressing for out set up.
     * We are using /24, ipv4, and no HTTP
     * Do the same for LAN but the assigned IP is 10.0.5.2
     * The firewall is now configured and we now want to move to windows to connect to the firewall.
** Configuring Windows for PfSense
   Windows will use our PfSense instance as it's router and firewall. We want to configure the machine to connect to the router. We also want to make a new admin account and give it a new hostname.
  1. [X] Make a new hostname
     * To do this enter Settings -> System -> About -> Rename this PC
     * Restart
  2. [X] Make a local admin
     * Open control panel and go into User Accounts. 
     * Manage another account and create a new account.
     * Add someone else to the PC and name them whatever.
     * Make the user an admin
     * Delete the champ account.
  3. [X] Configure the network
     * Set VM settings to connect the Network Adapter to the LAN.
     * Restart
     * Enter control panel -> Network and Internet
     * Sharing Center -> Ethernet0 -> Properties
     * Here we can go into the properties of IPv4
     * We'll want to set the gateway to 10.0.5.2 and our IP to 10.0.5.100. Subnet mask is what you think it is. Our DNS is the same as the gateway.
     * Make sure to set the upstream gateway to 10.0.17.2. This fucked me for about an hour lmao.
  4. [X] Finish configuring the firewall from the web browser
     * Connect to our firewall in the browser (10.0.5.2)
     * Login with the admin and the default password
     * Press next to go through the wizard. 
       * Change things and uncheck "block private networks"
  
* DNS Notes
** What is DNS
  * Domain Name System == DNS
  * An important part of the interent. DNS disappearing could destroy our internet
  * Servers are connected with wires and are associated with IPs
    * We cannot remember all of these
  * DNS uses an actual name to translate into the IPs
  * Typing a URL in the your browser sends you to url.com.
    * This hidden dot represents the root of the internet namespace
  * In our setup, our domain is cyber.local. It has the records to our local stuff, but not stuff outbound
  * DNS uses both UDP and TCP
  * Even 8.8.8.8 doesn't know a URL per-say, but it will go ask the name servers it uses until it finds the IP for the URL
  * Popular DNS Records
    * A - Address Record used to resolve a name to IPv4 (most common record)
    * CNAME - Canonical Name Record used to alias one name to another
    * AAAA - Address Record for IPv6
    * PTR - Pointer Record used to resolve IPv4 to name (reverse query)
    * MX - Mail Exchange used to identify email servers for a domain
    * SRV - Service locator locates services like SIP servers, Conference Servers  
  * A DNS server is just a list of A records pretty much
  * DNS has a cache locally on machines that will help machines connect faster to recent sites
  * RFC - Request for Comments. Specs for Protocols
** How DNS works
  * Browser and Computer try and see if they know the URL in cache
  * If they don't know where it is, the OS will ask a *Resolving Name Server*
    * The work horse of the DNS engine
    * Configured manually or automatically
  * Computer queries the Resolving Name Server for the inputed URL
    * All Resolving Name Servers should know how to find the root of the internet name server
  * The Resolving Name Server gets information from the root on where to find the com root servers if the root doesnt know or the TLD name servers (Top Level Domain)
    * The TLD name servers send you to the ANS (Authoritative Name Servers) if they don't know the URL
      * The TLD name server know what ANS to use based on the URL registrar
  * The Resolving Name Server continues on to the ANS and gets the IP of the website that they are requesting.
This all takes a really fast time

** More DNS info
   * ~ipconfig /flushdns~ in an elevated command prompt will flush the dns cache on the system
   *  
* Active Directory Notes
  * AD gives us the "god mode" for the whole domain
  * Core Services
    * AD Services
    * DNS
    * DHCP
  * When you are on a domain, the credentials are stored on the AD which is more secure than local machines
  * DNS comes with AD. You cannot have one without the other in a Domain Controller promoted server.
  * Don't manually add entries to "Computers" as AD will do this for us when a computer has joined the Domain.
* Server 2019 Configuration (Lab 2 Notes)
  * For our purposes, use all the default settings except skip over the product key if prompted and set an admin password.
  * Open up server manager and configure the local network so that it interfaces with our FW
  * Set up local network like you would in normal windows 10
    * Set DNS to the gateway (our FW)
    * Turn on discoverability if it pops up
  * Change the hostname and set time to ETC
    * This will require a reboot once changed
** Installing ADDS Role in Server Manager
   * Go to Manage and click Add Roles and Features. Here we will be able to install services and the like.
   * When you get to ~Server Roles~, check Active Directory Domain Services and Add Features
   * Check off Restart destination server if required.
   * This installation takes a bit.
** Promoting to a Domain Server
After the installation for Domain Services is set, we can promote the Server to become a DC
  * Press the flag at the top and click the promote link. Make sure the hostname is set. Verify with a ~whoami~
  * Forest - Domain
    * Mine will be sam.local
  * We'll need to set a DSRM (Directory Services Restore Mode) password in case anything goes terribly wrong.
  * At this point, we'll have an error. This is fine as we are working locally with our .local TLD (top level domain). Valid top level domains are .com and the like
  * Everything else is defaults in this wizard
  * Install and reboot
  * We will boot and sign in as domain admin

** Adding a DNS Record
   * At this point, our DNS server is now set to 127.0.0.1 instead of our FW. DNS queries that aren't handled here are sent to FW, in turn, sending it to it's DNS
   * We'll want to create a DNS record here so that anyone using this server as it's DNS will be able to resolve fw01.sam.local to it's IP, which will allow further outbound connection.
     * Trying to ping the hostname will result in error
   * To add the record, we'll want to get to the DNS manager. We do this by going to DNS on the left, and then right clicking on our server and selecting DNS manager
*** Forward Lookup Zone:
    * Expand our domain and right click it, adding a new host (A)
    * Here we'll add our name, domain name, and IP address
    * We'll want to create the PTR record as well
     * This will error because we need to set up a reverse lookup zone in order to actually create a PTR record
***  Reverse DNS
    * On the left, we'll see the Reverse Lookup Zones folder. Here, we'll want to create a new lookup zone for 10.0.5.0/24 network (our local network)
    * After this is created, we'll want to update our A record
** Named Domain Users on AD Server
  * To add new users, right click our server in AD DS and click Active Directory Users and Computers
    * Here we can right open our domain, right click Users, and add a new user.
  * The admin name should have the suffix ~-adm~
  * Add a user to a group by simply right clicking them and adding them to a group

* Joining a windows machine to a domain
  * Change the machine's DNS to the DNS of our DC
    * This is important
  * Test name resolution by pinging a hostname.domain.local
  * Go to System Properties. Here you can change the domain.
    * When you change the domain, you have to enter in the creds of an account with access to the domain
      * Give this a second, and then you will see a welcome message.
  * Restart
* Linux Fundamentals
  * The center point of a lot of OSs. It's a kernel.
  * Linux != Unix
    * Unix is a lot of older which is a single user, single task OS
    * Linux has networking, multi-users, multi-tasking, etc
  * Linux is stable and open source
  * Lots of linux distros
  * Enterprise uses CentOS as it is based off of Red Hat
    * CentOS uses ~yum~ as a package
    * Packages can be updated and upgraded with ~yum update~ or ~upgrade~ respectively.
  * To set up the network on our machine, we can use the GUI for network manager called ~nmtui~. This makes it easy to configure our IPs and hostname as par for this course
  * As we don't want to "run with scissors", we'll want to create an account that doesn't have root all the time.
  * We'll do this with the ~adduser~ command which will create a home directory
  * We'll need to add a password for the user, which can be done with ~passwd~
  * We can also remove a user with ~userdel~ if we mess anything up
  * Giving the user sudo permissions is easy enough and can be done by assigning the user to the ~wheel~ group.
  * ~history~ can be used to display your history. You can also view this in the hidden file of ~.bash_history~ in your home directory.
    * ~history -c~ can also clear your history
  * 
** Command Log:
   * ~userdel~ can be used to delete a user
   * ~umask~ can be used to change the default permissions for a user. This is not persistant though and will need to be added to a config for future persistance.
   * ~id $USER~ will display the groups the logged in user is in. If you replace the $USER variable with another user on the machine, you will see their permissions, granted you have root.
   * ~w~ or ~who~ will allow you to see who is logged in on the system right now.
** Directory Info:
 * /bin
   This directory is used to store commands that can be run on the system.
 * /etc
   This directory contains all system related configuration files.
 * /home
   Here is where all the user files are found.
 * / 
   Root is where all the files on the system are mounted and where everything stems from.
 * /dev
   The devices directory is where devices are mounted as special files.

  

* DHCP
  * DHCP is important for how we operate with networking
  * Dynamic Host Configuration Protocol
  * Assigns IP addresses to hosts
  * Provides otther address, the subnet mask, default gateway, and the DNS address
  * Can be a client and as a server
  * Example:
    * Two computers connected to a switch and to a router
    * computers need unique IP addresses
    * These could be assigned manually, but that doesn't work when we need to scale up
    * Each computer runs a DHCP client to ask the DHCP server for an IP address
    * Enterprise most likely has a dedicated server
  * Process 
    1. DHCPDiscover: a computer will broadcast for a DHCP server when they are connected to the network. 
    2. DHCPOffer: When the server get's the message, the server will offer an available IP address.
       * If more than one are offered, the client will pick the first one it recieves
    3. DHCPRequest: The client who got the offer will then confirm that it will take the offered IP address
    4. DHCPACK: The server will send the IP address, the subnet mask, gateway, and DHCP server to the client.
  * The server gives IP addresses on a "lease". If the IP address is not renewed within that period, the IP address will go back into the pool of available IP addresses
    * The server keeps track of all the IP addresses given out
  * The UDP ports that it operates on are 68 for the client and 67 for the server
  * Different settings and scenerios can change the process described here, but this is just a general overview
      
     
